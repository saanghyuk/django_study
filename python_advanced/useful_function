
1. dis(func_v3) -> 실행 과정을 보여줌 아래와 같이 나옴.
 29           0 LOAD_GLOBAL              0 (print)
              2 LOAD_FAST                0 (a)
              4 CALL_FUNCTION            1
              6 POP_TOP

 30           8 LOAD_GLOBAL              0 (print)
             10 LOAD_FAST                1 (b)
             12 CALL_FUNCTION            1
             14 POP_TOP

 31          16 LOAD_CONST               1 (5)
             18 STORE_FAST               1 (b)
             20 LOAD_CONST               0 (None)
             22 RETURN_VALUE
None

2. free variable(closure) 확인
func.__closure__ 형태로 자유 변수에 해당하는 객체들을 확인할 수 있고,
func.__code__.co_freevars 를 통해 자유 변수들의 이름을 확인할 수 있다.


3.
print('EX2-1 -', id(x), id(y)) # id값 같음. 얕은 복사
print('EX2-2 -', x==y) #값이 같냐?
print('EX2-3 -', x is y) # id가 같냐?

4. dir(class), instance.__dict__
https://m.blog.naver.com/tjgml1343/222039870724
dir은 객체가 가진 속성과 메소드 정보를 나열
dict는 객체가 가진 속성과 그 속성의 내용까지 나열

5. iterable -> for을 쓸 수 있는 객체. iterator -> next를 쓸 수 있는 객체
iterator은 iterable.
그리고, 이 iterator를 생성해주는 함수가 Generator.
함수나 객체 내부에 yield가 있으면, generator객체라고 찍힘.
class자체를 iterator로 만들어 주고 싶으면
class WordSplitGenerator:
  def __init__(self, text):
    self._text = text.split(' ')

  def __iter__(self):
    for word in self._text:
      yield word #  Generator, 이게 next에서 코드 썻던거 다 해주는 거야.
    return
이런식으로 __iter__에다가 yield를 써주면 됨.
그리고 iter(class) 를 해주면, generator객체라고 type이 찍힘.